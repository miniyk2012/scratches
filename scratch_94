# -*- coding: utf-8 -*-


class A(object):
    def __init__(self, *args, **kwargs):
        print 'call init'
        print self
        return super(A, self).__init__(*args, **kwargs)

    def __new__(cls, *args, **kwargs):
        print 'call new'
        print cls
        x = super(A, cls).__new__(cls, *args, **kwargs)
        return x
a = A()
print(a)

print('*'*10)

class MyMeta(type):
    def __new__(meta, name, bases, dct):
        print '-----------------------------------'
        print "Allocating memory for class", name
        print meta
        print bases
        print dct
        x = super(MyMeta, meta).__new__(meta, name,
                                           bases, dct)
        print x  # 这里x是个类,而非instance
        return x

    def __init__(cls, name, bases, dct):
        print '-----------------------------------'
        print "Initializing class", name
        print cls
        print bases
        print dct
        super(MyMeta, cls).__init__(name, bases, dct)

class MyClass(object):
    __metaclass__ = MyMeta

    def foo(self):
        print 'fooooo'

instance1 = MyClass()
instance2 = MyClass()
print '-----------------------------------'
instance1.foo()
print instance2